<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.0.6.4033103-beta\lib\net45\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.0.6.4033103-beta\lib\net45\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.Bcl.Immutable.1.1.20-beta\lib\portable-net45+win8\System.Collections.Immutable.dll" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
string solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)");
SyntaxTree tree = CSharpSyntaxTree.ParseFile(solutionPath + "/EveFortressServer/ServerMethods.cs");
var root = (CompilationUnitSyntax)tree.GetRoot();
var methods = root.DescendantNodes()
                    .OfType<MethodDeclarationSyntax>();
#>
// GENERATED CODE! ALL CHANGES WILL BE OVERWRITTEN!!!
using EveFortressModel;
using Lidgren.Network;
using ProtoBuf;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Utils;

namespace EveFortressServer
{
    public class MessageParser
    {
        public Dictionary<string, Func<NetIncomingMessage, byte[]>> Parsers { get; set; }
        public MessageParser()
        {
            Parsers = new Dictionary<string, Func<NetIncomingMessage, byte[]>>();
            PopulateParsers();
        }

        public byte[] ParseMessage(string command, NetIncomingMessage msg)
        {
            return Parsers[command](msg);
        }

        private void PopulateParsers()
        {
<#
foreach (var method in methods)
    {
        var parameters = method.ParameterList.Parameters;
#>
            Parsers["<#=method.Identifier.ToString() #>"] = (msg) =>
            {
<#
        string lambdaType = "";
        string lambdaTypeList = "";
        string lambdaParameterList = "";
        string typeList = "";
        int i = 0;
        foreach (var param in parameters)
        {
            var paramType = param.Type.ToString();
            if (lambdaParameterList != "") lambdaParameterList += ", ";
            if (paramType != "NetConnection")
            {
                lambdaParameterList += "T" + i.ToString();
                if (lambdaTypeList != "") lambdaTypeList += ", ";
                lambdaTypeList += "T" + i.ToString();
                if (typeList != "") typeList += ", ";
                typeList += paramType;
            }
            else
            {
                lambdaParameterList += "msg.SenderConnection";
            }
            i++;
        }
        if (method.ReturnType.ToString() != "void")
        {
            if (typeList != "") typeList += ", ";
            typeList += method.ReturnType.ToString();
            lambdaType = "Func";
        }
        else
        {
            lambdaType = "Action";
        }
#>
                <#=lambdaType#><<#=typeList#>> method = (<#=lambdaTypeList#>) => Program.ServerMethods.<#=method.Identifier.ToString()#>(<#=lambdaParameterList#>);
                return Program.ServerNetworkManager.ExecuteMethodFromMessage<<#=typeList#>>(msg, method);
            };
<#
    }
#>
        }
    }
}

