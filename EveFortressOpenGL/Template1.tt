<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ assembly name="EnvDTE" #> 
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
	var visualstudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE))
						as EnvDTE.DTE;

	var project = visualstudio.Solution.FindProjectItem(this.Host.TemplateFile)
									   .ContainingProject as EnvDTE.Project;

	var namespaces = new List<string>();
	foreach (EnvDTE.ProjectItem item in GetProjectItemsRecursively(project.ProjectItems))
    {
		if (item == null) continue;
		var fileCodeModel = item.FileCodeModel;
		if (fileCodeModel == null) continue;
		var codeElements = fileCodeModel.CodeElements;
		foreach (EnvDTE.CodeElement elem in codeElements)
        {
			if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace &&
				!namespaces.Contains(elem.FullName))
            {
				namespaces.Add(elem.FullName);
            }
        }
    }

	var codeNamespaces = project.CodeModel.CodeElements
										  .OfType<EnvDTE.CodeNamespace>()
								          .Where(cn => namespaces.Contains(cn.FullName));

	foreach (var ns in namespaces)
    {
		#><#= ns #><#
    }
#>

<#+
public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
{
	var ret = new List<EnvDTE.ProjectItem>();
	if (items == null) return ret;
	foreach (EnvDTE.ProjectItem item in items)
    {
		ret.Add(item);
		ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
    }
	return ret;
}
#>
