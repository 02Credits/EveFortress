<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.0.6.4033103-beta\lib\net45\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.0.6.4033103-beta\lib\net45\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.Bcl.Immutable.1.1.20-beta\lib\portable-net45+win8\System.Collections.Immutable.dll" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
string solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)");
SyntaxTree tree = CSharpSyntaxTree.ParseFile(solutionPath + "/EveFortressServer/ServerMethods.cs");
var root = (CompilationUnitSyntax)tree.GetRoot();
var methods = root.DescendantNodes()
                    .OfType<MethodDeclarationSyntax>();
#>
// GENERATED FILE! CHANGES WILL BE OVERWRITTEN

using EveFortressModel;
using Lidgren.Network;
using ProtoBuf;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Utils;

namespace EveFortressClient
{
    public class ServerMethods
    {
<#
    foreach (var method in methods)
    {
        var typeParameters = "";
        string returnTypeText;
        if (method.ReturnType.ToString() != "void")
        {
            returnTypeText = "Task<" + method.ReturnType.ToString() + ">";
            typeParameters += method.ReturnType.ToString();
        }
	    else
        {
            returnTypeText = "Task<object>";
            typeParameters += "object";
        }

        var parameters = method.ParameterList.Parameters;
        var parameterText = "";
        var sendParametersText = "";
        foreach (var param in parameters)
        {
            if (param.Type.ToString() != "NetConnection")
            {
                if (parameterText != "")
                    parameterText += ", ";
                parameterText += param.ToString();
                if (typeParameters != "")
                    typeParameters += ", ";
                typeParameters += param.Type.ToString();
                if (sendParametersText != "")
                    sendParametersText += ", ";
                sendParametersText += param.Identifier.ToString();
            }
        }
#>
        public <#=returnTypeText#> <#=method.Identifier.ToString()#>(<#=parameterText#>)
        {
            return Game.ClientNetworkManager.SendCommand<<#=typeParameters#>>("<#=method.Identifier.ToString()#>", <#=sendParametersText#>);
        }
<#
    }
#>
    }
}