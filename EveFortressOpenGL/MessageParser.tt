<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Runtime" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.Common.0.6.4033103-beta\lib\net45\Microsoft.CodeAnalysis.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.CodeAnalysis.CSharp.0.6.4033103-beta\lib\net45\Microsoft.CodeAnalysis.CSharp.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Microsoft.Bcl.Immutable.1.1.20-beta\lib\portable-net45+win8\System.Collections.Immutable.dll" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
string solutionPath = Host.ResolveAssemblyReference("$(SolutionDir)");
SyntaxTree tree = CSharpSyntaxTree.ParseFile(solutionPath + "/EveFortressOpenGL/ClientMethods.cs");
var root = (CompilationUnitSyntax)tree.GetRoot();
var methods = root.DescendantNodes()
                    .OfType<MethodDeclarationSyntax>();
#>
// GENERATED CODE! ALL CHANGES WILL BE OVERWRITTEN!!!
using EveFortressModel;
using Lidgren.Network;
using ProtoBuf;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EveFortressClient
{
    public class MessageParser
    {
        public Dictionary<string, Action<NetIncomingMessage, long>> Parsers { get; set; }
        public MessageParser()
        {
            Parsers = new Dictionary<string, Action<NetIncomingMessage, long>>();
            PopulateParsers();
        }

        public void ParseMessage(NetIncomingMessage msg)
        {
            var commandName = msg.ReadString();
            var id = msg.ReadInt64();
            if (commandName == "response")
            {
                Game.ServerMethods.TaskCompletionSources[id](msg);
            }
			else if (commandName == "callback")
			{
				Console.WriteLine("Recieved Callback for CallbackID: " + id);
				Game.ServerMethods.CallbackActions[id](msg);
			}
            else
            {
                Parsers[commandName](msg, id);
            }
        }

        public void SendResponse(long conversationID)
        {
            SendResponse(conversationID, new byte[]{});
        }

        public void SendResponse(long conversationID, byte[] responseData)
        {
            var message = Game.ClientNetworkManager.Connection.CreateMessage();
            message.Write("response");
            message.Write(conversationID);
            if (responseData.Length != 0)
            {
                message.Write(responseData.Length);
                message.Write(responseData);
            }
            Game.ClientNetworkManager.Connection.SendMessage(message, NetDeliveryMethod.ReliableUnordered);
        }

        private void PopulateParsers()
        {
<#
foreach (var method in methods)
{
	var parameters = method.ParameterList.Parameters;
#>
            Parsers["<#= method.Identifier.ToString() #>"] = (msg, id) =>
            {
<#
	string methodArgumentList = "";
	foreach (var param in parameters)
    {
		var paramId = param.Identifier.ToString();
		var paramType = param.Type.ToString();
		if (paramType.StartsWith("Action"))
        {
#>
				var <#= paramId #>ID = msg.ReadInt64();
<#
			if (param.Type.ChildNodes().Any())
            {
				var genericTypeText = param.Type.ChildNodes().First();
#>
				Action<#= genericTypeText #> <#= paramId #> = (obj) => 
				{
					var callbackMessage = Game.ClientNetworkManager.Connection.CreateMessage();
					byte[] callbackParamData = Game.ClientNetworkManager.Serialize(obj);
					callbackMessage.Write("callback");
					callbackMessage.Write(<#= paramId #>ID);
					callbackMessage.Write(callbackParamData.Length);
					callbackMessage.Write(callbackParamData);
					Game.ClientNetworkManager.Connection.SendMessage(callbackMessage, NetDeliveryMethod.ReliableUnordered);
				};
<#
			}
			else
            {
#>
				Action <#= paramId #> = () =>
				{
					var callbackMessage = Game.ClientNetworkManager.Connection.CreateMessage();
					callbackMessage.Write("callback");
					callbackMessage.Write(<#= paramId #>ID);
					Game.ClientNetworkManager.Connection.SendMessage(callbackMessage, NetDeliveryMethod.ReliableUnordered);
				};
<#
            }
        }
		else
        {
#>
                var <#= paramId #>ByteCount = msg.ReadInt32();
                var <#= paramId #>Bytes = msg.ReadBytes(<#= paramId #>ByteCount);
				<#= paramId #> = Game.ClientNetworkManager.Deserialize<<#= paramType #>>(<#= paramId #>Bytes);
<#
		}
		if (methodArgumentList != "") methodArgumentList += ", ";
		methodArgumentList += param.Identifier.ToString();
	} 

	if (method.ReturnType.ToString() != "void")
	{
#>
                var result = Game.ClientMethods.<#= method.Identifier.ToString() #>(<#= methodArgumentList #>);
                byte[] resultData = Game.ClientNetworkManager.Serialize(result);
                SendResponse(id, resultData);
<#
	}
	else if (method.ReturnType.ChildTokens().First().ToString() == "Action")
    {
#>
				var returnCallbackID = Game.ServerMethods.GetNextCallbackID()
				var returnAction = Game.ClientMethods.<#= method.Identifier.ToString() #>(<#= methodArgumentList #>);
<#
				if (method.ReturnType.ChildNodes().Any())
                {
					var genericTypeText = method.ReturnType.ChildNodes().First();
#>
				Game.ServerMethods.CallbackActions[returnCallbackID] = (returnMsg) =>
				{
					var byteLength = returnMsg.ReadInt32();
					var bytes = returnMsg.ReadBytes(byteLength);
					var returnParam = Game.ClientNetworkManager.Deserialize<#= genericTypeText #>(bytes);
					returnAction(returnParam);
				};
<#
                } 
				else
                {
#>
				Game.ServerMethods.CallbackActions[returnCallbackID] = (returnMsg) =>
				{
					returnAction();
				};
<#
                }
#>
				var message = Game.ClientNetworkManager.Connection.CreateMessage();
				message.Write("response");
				message.Write(conversationID);
				message.Write(returnCallbackID);
				Game.ClientNetworkManager.Connection.SendMessage(message, NetDeliveryMethod.ReliableUnordered);
<#
    }
	else
    {
#>
				Game.ClientMethods.<#= method.Identifier.ToString() #>(<#= methodArgumentList #>);
				SendResponse(id, new byte[]{});
<#
	}
#>
            };
<#
} 
#>
        }
    }
}

